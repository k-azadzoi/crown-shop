{"ast":null,"code":"//hold all the saga code in the shop\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop-actions\";\nimport shopActionTypes from \"./shop-types\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap)(snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n\n  dispatchEvent(collectionsMap); // \tOLD VERSION IN SHOP-ACTIONS\n  // \t\tcollectionRef\n  // \t\t\t.get()\n  // \t\t\t.then(snapshot => {\n  // \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  // \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // \t\t\t})\n  // \t\t\t.catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  // }\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/k-charette/Desktop/repos/crown-shop/src/redux/shop/shop-sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","shopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","dispatchEvent","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA;AAEA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SACCC,SADD,EAECC,+BAFD,QAGO,+BAHP;AAKA,SACCC,uBADD,EAECC,uBAFD,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxC,MAAI;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,CAAJ,CAC5BO,QAD4B,CAA7B;AAGA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACA,GAPD,CAOE,OAAOC,KAAP,EAAc;AACf,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA;;AAEDC,EAAAA,aAAa,CAACH,cAAD,CAAb,CAZwC,CAaxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,OAAO,UAAUI,qBAAV,GAAkC;AACxC,QAAMjB,SAAS,CACdO,eAAe,CAACW,uBADF,EAEdV,qBAFc,CAAf;AAIA","sourcesContent":["//hold all the saga code in the shop\n\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport {\n\tfirestore,\n\tconvertCollectionsSnapshotToMap\n} from \"../../firebase/firebase.utils\";\n\nimport {\n\tfetchCollectionsSuccess,\n\tfetchCollectionsFailure\n} from \"./shop-actions\";\n\nimport shopActionTypes from \"./shop-types\";\n\nexport function* fetchCollectionsAsync() {\n\ttry {\n\t\tconst collectionRef = firestore.collection(\"collections\");\n\t\tconst snapshot = yield collectionRef.get();\n\t\tconst collectionsMap = yield call(convertCollectionsSnapshotToMap)(\n\t\t\tsnapshot\n\t\t);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap));\n\t} catch (error) {\n\t\tyield put(fetchCollectionsFailure(error.message));\n\t}\n\n\tdispatchEvent(collectionsMap);\n\t// \tOLD VERSION IN SHOP-ACTIONS\n\t// \t\tcollectionRef\n\t// \t\t\t.get()\n\t// \t\t\t.then(snapshot => {\n\t// \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\t// \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t// \t\t\t})\n\t// \t\t\t.catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\t// }\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeEvery(\n\t\tshopActionTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}