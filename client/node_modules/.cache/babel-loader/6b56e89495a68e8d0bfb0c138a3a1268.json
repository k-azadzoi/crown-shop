{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyD4chhkn2_br9oxiLK3TZs_eAO0XkqAAXY\",\n  authDomain: \"crown-db-5d7e2.firebaseapp.com\",\n  databaseURL: \"https://crown-db-5d7e2.firebaseio.com\",\n  projectId: \"crown-db-5d7e2\",\n  storageBucket: \"crown-db-5d7e2.appspot.com\",\n  messagingSenderId: \"183804602927\",\n  appId: \"1:183804602927:web:a0155d906b47217a76f4da\",\n  measurementId: \"G-6YKC3CWKNZ\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //batch write is a way to group all of our calls into one big request\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //getting the document at an empty string\n    //telling firebase to get a new document reference and generate a new id\n    const newDocRef = collectionRef.doc(); //set the value and batch it passing in newDocRef and the value which is obj\n\n    batch.set(newDocRef, obj);\n  }); //commit() sets up a Promise to do something if the call succeeds or not\n\n  return await batch.commit();\n}; //function will get the whole snapshot to be converted into an object\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    //inorder to get the data off the snapshot with need to call the data() method\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //setting up google authentication\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/k-charette/Desktop/repos/crown-shop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\n\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n\tapiKey: \"AIzaSyD4chhkn2_br9oxiLK3TZs_eAO0XkqAAXY\",\n\tauthDomain: \"crown-db-5d7e2.firebaseapp.com\",\n\tdatabaseURL: \"https://crown-db-5d7e2.firebaseio.com\",\n\tprojectId: \"crown-db-5d7e2\",\n\tstorageBucket: \"crown-db-5d7e2.appspot.com\",\n\tmessagingSenderId: \"183804602927\",\n\tappId: \"1:183804602927:web:a0155d906b47217a76f4da\",\n\tmeasurementId: \"G-6YKC3CWKNZ\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\tif (!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\n\tconst snapShot = await userRef.get();\n\n\tif (!snapShot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error creating user\", error.message);\n\t\t}\n\t}\n\treturn userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n\tcollectionKey,\n\tobjectsToAdd\n) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\n\t//batch write is a way to group all of our calls into one big request\n\tconst batch = firestore.batch();\n\n\tobjectsToAdd.forEach(obj => {\n\t\t//getting the document at an empty string\n\t\t//telling firebase to get a new document reference and generate a new id\n\t\tconst newDocRef = collectionRef.doc();\n\n\t\t//set the value and batch it passing in newDocRef and the value which is obj\n\t\tbatch.set(newDocRef, obj);\n\t});\n\t//commit() sets up a Promise to do something if the call succeeds or not\n\treturn await batch.commit();\n};\n\n//function will get the whole snapshot to be converted into an object\nexport const convertCollectionsSnapshotToMap = collections => {\n\tconst transformedCollection = collections.docs.map(doc => {\n\t\t//inorder to get the data off the snapshot with need to call the data() method\n\t\tconst { title, items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t};\n\t});\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nfirebase.initializeApp(config);\n\nexport const getCurrentUser = () => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst unsubscribe = auth.onAuthStateChanged(userAuth => {\n\t\t\tunsubscribe();\n\t\t\tresolve(userAuth);\n\t\t}, reject);\n\t});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//setting up google authentication\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}