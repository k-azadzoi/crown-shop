{"ast":null,"code":"//hold all the saga code in the shop\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop-actions\";\nimport shopActionTypes from \"./shop-types\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // \tOLD VERSION FROM SHOP-ACTIONS\n  // \t\tcollectionRef\n  // \t\t\t.get()\n  // \t\t\t.then(snapshot => {\n  // \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  // \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // \t\t\t})\n  // \t\t\t.catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  // }\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/k-charette/Desktop/repos/crown-shop/client/src/redux/shop/shop-sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","shopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA;AAEA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACCC,SADD,EAECC,+BAFD,QAGO,+BAHP;AAKA,SACCC,uBADD,EAECC,uBAFD,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxC,MAAI;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAChCI,+BADgC,EAEhCO,QAFgC,CAAjC;AAIA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACA,GARD,CAQE,OAAOC,KAAP,EAAc;AACf,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GAXuC,CAYxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMjB,UAAU,CACfQ,eAAe,CAACU,uBADD,EAEfT,qBAFe,CAAhB;AAIA;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC5B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACA","sourcesContent":["//hold all the saga code in the shop\n\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport {\n\tfirestore,\n\tconvertCollectionsSnapshotToMap\n} from \"../../firebase/firebase.utils\";\n\nimport {\n\tfetchCollectionsSuccess,\n\tfetchCollectionsFailure\n} from \"./shop-actions\";\n\nimport shopActionTypes from \"./shop-types\";\n\nexport function* fetchCollectionsAsync() {\n\ttry {\n\t\tconst collectionRef = firestore.collection(\"collections\");\n\t\tconst snapshot = yield collectionRef.get();\n\t\tconst collectionsMap = yield call(\n\t\t\tconvertCollectionsSnapshotToMap,\n\t\t\tsnapshot\n\t\t);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap));\n\t} catch (error) {\n\t\tyield put(fetchCollectionsFailure(error.message));\n\t}\n\t// \tOLD VERSION FROM SHOP-ACTIONS\n\t// \t\tcollectionRef\n\t// \t\t\t.get()\n\t// \t\t\t.then(snapshot => {\n\t// \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\t// \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t// \t\t\t})\n\t// \t\t\t.catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\t// }\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeLatest(\n\t\tshopActionTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n\nexport function* shopSagas() {\n\tyield all([call(fetchCollectionsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}